//! LoA packet structures.

// NOTE: This file is automatically generated.

use super::opcode::Opcode;
use crate::definitions::{SkillMoveOptionData, SkillOptionData, TripodIndex, TripodLevel};
use crate::parser::{serialize_bumpvec, BumpVec, Event, KindedBytes, Packet, Parser};

#[derive(serde::Serialize)]
pub struct PktRaidBossKillNotify;

impl Packet for PktRaidBossKillNotify {
    const OPCODE: Opcode = Opcode::RaidBossKillNotify;
}

impl<'bump> Event<'bump> for PktRaidBossKillNotify {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 6]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub0;

impl<'bump> Event<'bump> for Sub0 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 20]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub1;

impl<'bump> Event<'bump> for Sub1 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub2 {
    pub track_move_info: TrackMoveInfo,
}

impl<'bump> Event<'bump> for Sub2 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let track_move_info = <TrackMoveInfo>::parse(parser, bump)?;
        Ok(Self { track_move_info })
    }
}

#[derive(serde::Serialize)]
pub struct Sub3;

impl<'bump> Event<'bump> for Sub3 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 12]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub4 {
    pub item_tint: (),
}

impl<'bump> Event<'bump> for Sub4 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let item_tint = KindedBytes::<u16, 14, 5>::parse(parser, bump)?;
        parser.read_u32()?;
        parser.read_u64()?;
        Ok(Self { item_tint })
    }
}

#[derive(serde::Serialize)]
pub struct Sub5;

impl<'bump> Event<'bump> for Sub5 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_counted::<Sub4, u16>(bump, 5)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub6 {
    pub item_tint: (),
}

impl<'bump> Event<'bump> for Sub6 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        let item_tint = KindedBytes::<u16, 14, 5>::parse(parser, bump)?;
        parser.read_u64()?;
        Ok(Self { item_tint })
    }
}

#[derive(serde::Serialize)]
pub struct PktNewPc<'bump> {
    pub pc_struct: PcStruct<'bump>,
}

impl Packet for PktNewPc<'_> {
    const OPCODE: Opcode = Opcode::NewPc;
}

impl<'bump> Event<'bump> for PktNewPc<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        (parser.read_bool()?)
            .then(|| <Sub0>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub1>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub2>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub3>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub5>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        let pc_struct = <PcStruct>::parse(parser, bump)?;
        (parser.read_bool()?)
            .then(|| <Sub6>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        Ok(Self { pc_struct })
    }
}

#[derive(serde::Serialize)]
pub struct PktSkillDamageAbnormalMoveNotify<'bump> {
    pub skill_effect_id: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub skill_damage_abnormal_move_events: BumpVec<'bump, SkillDamageAbnormalMoveEvent>,
    pub skill_id: u32,
    pub source_id: u64,
}

impl Packet for PktSkillDamageAbnormalMoveNotify<'_> {
    const OPCODE: Opcode = Opcode::SkillDamageAbnormalMoveNotify;
}

impl<'bump> Event<'bump> for PktSkillDamageAbnormalMoveNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let skill_effect_id = parser.read_u32()?;
        let skill_damage_abnormal_move_events =
            parser.read_counted::<SkillDamageAbnormalMoveEvent, u16>(bump, 50)?;
        parser.read_u8()?;
        parser.read_u32()?;
        let skill_id = parser.read_u32()?;
        let source_id = parser.read_u64()?;
        Ok(Self {
            skill_effect_id,
            skill_damage_abnormal_move_events,
            skill_id,
            source_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub7<'bump> {
    pub skill_id: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub addon_skill_feature_id_list: BumpVec<'bump, u32>,
}

impl<'bump> Event<'bump> for Sub7<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let skill_id = parser.read_u32()?;
        let addon_skill_feature_id_list = parser.read_counted::<u32, u16>(bump, 5)?;
        Ok(Self {
            skill_id,
            addon_skill_feature_id_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktAddonSkillFeatureChangeNotify<'bump> {
    pub addon_feature_id_list: (),
    pub object_id: u64,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub addon_skill_feature_list: BumpVec<'bump, Sub7<'bump>>,
}

impl Packet for PktAddonSkillFeatureChangeNotify<'_> {
    const OPCODE: Opcode = Opcode::AddonSkillFeatureChangeNotify;
}

impl<'bump> Event<'bump> for PktAddonSkillFeatureChangeNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let addon_feature_id_list = KindedBytes::<u16, 4, 200>::parse(parser, bump)?;
        let object_id = parser.read_u64()?;
        let addon_skill_feature_list = parser.read_counted::<Sub7, u16>(bump, 200)?;
        Ok(Self {
            addon_feature_id_list,
            object_id,
            addon_skill_feature_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktStatusEffectDurationNotify {
    pub effect_instance_id: u32,
    pub expiration_tick: u64,
    pub target_id: u64,
}

impl Packet for PktStatusEffectDurationNotify {
    const OPCODE: Opcode = Opcode::StatusEffectDurationNotify;
}

impl<'bump> Event<'bump> for PktStatusEffectDurationNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let effect_instance_id = parser.read_u32()?;
        parser.skip(1)?;
        let expiration_tick = parser.read_u64()?;
        let target_id = parser.read_u64()?;
        parser.skip(1)?;
        Ok(Self {
            effect_instance_id,
            expiration_tick,
            target_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktPassiveStatusEffectRemoveNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub passive_status_effect_list: BumpVec<'bump, u32>,
}

impl Packet for PktPassiveStatusEffectRemoveNotify<'_> {
    const OPCODE: Opcode = Opcode::PassiveStatusEffectRemoveNotify;
}

impl<'bump> Event<'bump> for PktPassiveStatusEffectRemoveNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let passive_status_effect_list = parser.read_counted::<u32, u16>(bump, 10)?;
        Ok(Self {
            passive_status_effect_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktStatusEffectRemoveNotify<'bump> {
    pub reason: u8,
    pub object_id: u64,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub status_effect_ids: BumpVec<'bump, u32>,
}

impl Packet for PktStatusEffectRemoveNotify<'_> {
    const OPCODE: Opcode = Opcode::StatusEffectRemoveNotify;
}

impl<'bump> Event<'bump> for PktStatusEffectRemoveNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let reason = parser.read_u8()?;
        let object_id = parser.read_u64()?;
        let status_effect_ids = parser.read_counted::<u32, u16>(bump, 80)?;
        Ok(Self {
            reason,
            object_id,
            status_effect_ids,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktStatusEffectSyncDataNotify {
    pub effect_instance_id: u32,
    pub character_id: u64,
    pub value: u32,
    pub object_id: u64,
}

impl Packet for PktStatusEffectSyncDataNotify {
    const OPCODE: Opcode = Opcode::StatusEffectSyncDataNotify;
}

impl<'bump> Event<'bump> for PktStatusEffectSyncDataNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.skip(2)?;
        let effect_instance_id = parser.read_u32()?;
        let character_id = parser.read_u64()?;
        let value = parser.read_u32()?;
        parser.skip(4)?;
        let object_id = parser.read_u64()?;
        Ok(Self {
            effect_instance_id,
            character_id,
            value,
            object_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktTroopMemberUpdateMinNotify<'bump> {
    pub character_id: u64,
    pub max_hp: i64,
    pub cur_hp: i64,
    pub position: u64,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub status_effect_datas: BumpVec<'bump, StatusEffectData>,
}

impl Packet for PktTroopMemberUpdateMinNotify<'_> {
    const OPCODE: Opcode = Opcode::TroopMemberUpdateMinNotify;
}

impl<'bump> Event<'bump> for PktTroopMemberUpdateMinNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        let character_id = parser.read_u64()?;
        let max_hp = parser.read_packed_i64()?;
        let cur_hp = parser.read_packed_i64()?;
        let position = parser.read_u64()?;
        let status_effect_datas = parser.read_counted::<StatusEffectData, u16>(bump, 80)?;
        Ok(Self {
            character_id,
            max_hp,
            cur_hp,
            position,
            status_effect_datas,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktInitItem<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub item_data_list: BumpVec<'bump, ItemData>,
    pub storage_type: u8,
}

impl Packet for PktInitItem<'_> {
    const OPCODE: Opcode = Opcode::InitItem;
}

impl<'bump> Event<'bump> for PktInitItem<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let item_data_list = parser.read_counted::<ItemData, u16>(bump, 80)?;
        let storage_type = parser.read_u8()?;
        Ok(Self {
            item_data_list,
            storage_type,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktActiveAbilityNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub active_ability_list: BumpVec<'bump, ActiveAbility>,
    pub object_id: u64,
}

impl Packet for PktActiveAbilityNotify<'_> {
    const OPCODE: Opcode = Opcode::ActiveAbilityNotify;
}

impl<'bump> Event<'bump> for PktActiveAbilityNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let active_ability_list = parser.read_counted::<ActiveAbility, u16>(bump, 60)?;
        let object_id = parser.read_u64()?;
        Ok(Self {
            active_ability_list,
            object_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktSkillStageNotify {
    pub skill_id: u32,
    pub source_id: u64,
    pub stage: u8,
}

impl Packet for PktSkillStageNotify {
    const OPCODE: Opcode = Opcode::SkillStageNotify;
}

impl<'bump> Event<'bump> for PktSkillStageNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.skip(8)?;
        let skill_id = parser.read_u32()?;
        let source_id = parser.read_u64()?;
        parser.skip(6)?;
        let stage = parser.read_u8()?;
        parser.skip(25)?;
        Ok(Self {
            skill_id,
            source_id,
            stage,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub8;

impl<'bump> Event<'bump> for Sub8 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u64()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct PktStatusEffectAddNotify {
    pub new: bool,
    pub status_effect_data: StatusEffectData,
    pub object_id: u64,
}

impl Packet for PktStatusEffectAddNotify {
    const OPCODE: Opcode = Opcode::StatusEffectAddNotify;
}

impl<'bump> Event<'bump> for PktStatusEffectAddNotify {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        (parser.read_bool()?)
            .then(|| <Sub8>::parse(parser, bump))
            .transpose()?;
        let new = parser.read_bool()?;
        let status_effect_data = <StatusEffectData>::parse(parser, bump)?;
        let object_id = parser.read_u64()?;
        parser.read_u64()?;
        Ok(Self {
            new,
            status_effect_data,
            object_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub9;

impl<'bump> Event<'bump> for Sub9 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub10;

impl<'bump> Event<'bump> for Sub10 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_str(bump)?;
        parser.read_str(bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub11;

impl<'bump> Event<'bump> for Sub11 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u64()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct PktNewNpc<'bump> {
    pub npc_struct: NpcData<'bump>,
}

impl Packet for PktNewNpc<'_> {
    const OPCODE: Opcode = Opcode::NewNpc;
}

impl<'bump> Event<'bump> for PktNewNpc<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        (parser.read_bool()?)
            .then(|| <Sub9>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        (parser.read_bool()?)
            .then(|| <Sub10>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub11>::parse(parser, bump))
            .transpose()?;
        let npc_struct = <NpcData>::parse(parser, bump)?;
        Ok(Self { npc_struct })
    }
}

#[derive(serde::Serialize)]
pub struct Sub12;

impl<'bump> Event<'bump> for Sub12 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub13;

impl<'bump> Event<'bump> for Sub13 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub14;

impl<'bump> Event<'bump> for Sub14 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct PktDeathNotify {
    pub target_id: u64,
    pub source_id: u64,
}

impl Packet for PktDeathNotify {
    const OPCODE: Opcode = Opcode::DeathNotify;
}

impl<'bump> Event<'bump> for PktDeathNotify {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u64()?;
        (parser.read_bool()?)
            .then(|| <Sub12>::parse(parser, bump))
            .transpose()?;
        let target_id = parser.read_u64()?;
        parser.read_u32()?;
        parser.read_u32()?;
        parser.read_u8()?;
        let source_id = parser.read_u64()?;
        (parser.read_bool()?)
            .then(|| <Sub13>::parse(parser, bump))
            .transpose()?;
        parser.read_u16()?;
        (parser.read_bool()?)
            .then(|| <Sub14>::parse(parser, bump))
            .transpose()?;
        Ok(Self {
            target_id,
            source_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub15;

impl<'bump> Event<'bump> for Sub15 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub16 {
    pub value: i64,
    pub stat_type: u8,
}

impl<'bump> Event<'bump> for Sub16 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let value = parser.read_packed_i64()?;
        let stat_type = parser.read_u8()?;
        Ok(Self { value, stat_type })
    }
}

#[derive(serde::Serialize)]
pub struct PktInitPc<'bump> {
    pub player_id: u64,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub status_effect_datas: BumpVec<'bump, StatusEffectData>,
    pub level: u16,
    pub character_id: u64,
    pub class_id: u16,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub stat_pair: BumpVec<'bump, Sub16>,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub period_update_stat_data_list: BumpVec<'bump, PeriodUpdateStatData>,
    pub gear_level: f32,
    pub name: &'bump str,
}

impl Packet for PktInitPc<'_> {
    const OPCODE: Opcode = Opcode::InitPc;
}

impl<'bump> Event<'bump> for PktInitPc<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u16()?;
        parser.read_u64()?;
        parser.read_u8()?;
        parser.read_u16()?;
        parser.read_u32()?;
        parser.read_u64()?;
        let player_id = parser.read_u64()?;
        parser.read_u8()?;
        parser.read_u8()?;
        parser.read_str(bump)?;
        parser.read_u8()?;
        parser.read_u8()?;
        let status_effect_datas = parser.read_counted::<StatusEffectData, u16>(bump, 80)?;
        <[u8; 35]>::parse(parser, bump)?;
        parser.read_u32()?;
        parser.read_u8()?;
        parser.read_u8()?;
        parser.read_u32()?;
        parser.read_u8()?;
        let level = parser.read_u16()?;
        parser.read_u64()?;
        let character_id = parser.read_u64()?;
        parser.read_u8()?;
        parser.read_u8()?;
        parser.read_u32()?;
        parser.read_u8()?;
        parser.read_u16()?;
        parser.read_u8()?;
        let class_id = parser.read_u16()?;
        parser.read_u64()?;
        parser.read_u8()?;
        <[u8; 120]>::parse(parser, bump)?;
        parser.read_u32()?;
        parser.read_u8()?;
        parser.read_u8()?;
        parser.read_u16()?;
        parser.read_u8()?;
        parser.read_u32()?;
        KindedBytes::<u16, 1, 63>::parse(parser, bump)?;
        parser.read_u32()?;
        <[u8; 25]>::parse(parser, bump)?;
        parser.read_u32()?;
        parser.read_u8()?;
        parser.read_u32()?;
        (parser.read_bool()?)
            .then(|| <Sub15>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        parser.read_u64()?;
        KindedBytes::<u16, 17, 3>::parse(parser, bump)?;
        let stat_pair = parser.read_counted::<Sub16, u16>(bump, 153)?;
        KindedBytes::<u16, 30, 104>::parse(parser, bump)?;
        parser.read_u8()?;
        parser.read_u32()?;
        let period_update_stat_data_list =
            parser.read_counted::<PeriodUpdateStatData, u16>(bump, 5)?;
        let gear_level = parser.read_f32()?;
        let name = parser.read_str(bump)?;
        parser.read_u32()?;
        parser.read_u8()?;
        Ok(Self {
            player_id,
            status_effect_datas,
            level,
            character_id,
            class_id,
            stat_pair,
            period_update_stat_data_list,
            gear_level,
            name,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktIdentityStanceChangeNotify {
    pub object_id: u64,
    pub stance: u8,
}

impl Packet for PktIdentityStanceChangeNotify {
    const OPCODE: Opcode = Opcode::IdentityStanceChangeNotify;
}

impl<'bump> Event<'bump> for PktIdentityStanceChangeNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let object_id = parser.read_u64()?;
        let stance = parser.read_u8()?;
        parser.skip(1)?;
        Ok(Self { object_id, stance })
    }
}

#[derive(serde::Serialize)]
pub struct Sub17;

impl<'bump> Event<'bump> for Sub17 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub18 {
    pub skill_effect_id: u32,
}

impl<'bump> Event<'bump> for Sub18 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let skill_effect_id = parser.read_u32()?;
        Ok(Self { skill_effect_id })
    }
}

#[derive(serde::Serialize)]
pub struct PktSkillDamageNotify<'bump> {
    pub source_id: u64,
    pub skill_level: u8,
    pub skill_id: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub skill_damage_events: BumpVec<'bump, SkillDamageEvent>,
}

impl Packet for PktSkillDamageNotify<'_> {
    const OPCODE: Opcode = Opcode::SkillDamageNotify;
}

impl<'bump> Event<'bump> for PktSkillDamageNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        (parser.read_bool()?)
            .then(|| <Sub17>::parse(parser, bump))
            .transpose()?;
        let source_id = parser.read_u64()?;
        let skill_level = parser.read_u8()?;
        (parser.read_bool()?)
            .then(|| <Sub18>::parse(parser, bump))
            .transpose()?;
        let skill_id = parser.read_u32()?;
        let skill_damage_events = parser.read_counted::<SkillDamageEvent, u16>(bump, 50)?;
        Ok(Self {
            source_id,
            skill_level,
            skill_id,
            skill_damage_events,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktParalyzationStateNotify {
    pub decrease_point: u32,
    pub hit_check_time: u32,
    pub no_hit_check_time: u32,
    pub object_id: u64,
    pub paralyzation_max_point: u32,
    pub enable: bool,
    pub paralyzation_point: u32,
}

impl Packet for PktParalyzationStateNotify {
    const OPCODE: Opcode = Opcode::ParalyzationStateNotify;
}

impl<'bump> Event<'bump> for PktParalyzationStateNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let decrease_point = parser.read_u32()?;
        let hit_check_time = parser.read_u32()?;
        let no_hit_check_time = parser.read_u32()?;
        parser.skip(1)?;
        let object_id = parser.read_u64()?;
        let paralyzation_max_point = parser.read_u32()?;
        parser.skip(1)?;
        let enable = parser.read_bool()?;
        let paralyzation_point = parser.read_u32()?;
        parser.skip(1)?;
        Ok(Self {
            decrease_point,
            hit_check_time,
            no_hit_check_time,
            object_id,
            paralyzation_max_point,
            enable,
            paralyzation_point,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktEquipLifeToolChangeNotify<'bump> {
    pub object_id: u64,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub equip_life_tool_data_list: BumpVec<'bump, EquipItemData>,
}

impl Packet for PktEquipLifeToolChangeNotify<'_> {
    const OPCODE: Opcode = Opcode::EquipLifeToolChangeNotify;
}

impl<'bump> Event<'bump> for PktEquipLifeToolChangeNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let object_id = parser.read_u64()?;
        let equip_life_tool_data_list = parser.read_counted::<EquipItemData, u16>(bump, 9)?;
        Ok(Self {
            object_id,
            equip_life_tool_data_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktAuthTokenResult {
    pub packet_result_code: u32,
}

impl Packet for PktAuthTokenResult {
    const OPCODE: Opcode = Opcode::AuthTokenResult;
}

impl<'bump> Event<'bump> for PktAuthTokenResult {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let packet_result_code = parser.read_u32()?;
        KindedBytes::<u32, 1, 688>::parse(parser, bump)?;
        Ok(Self { packet_result_code })
    }
}

#[derive(serde::Serialize)]
pub struct PktCounterAttackNotify {
    pub target_id: u64,
    pub source_id: u64,
    pub r#type: u32,
}

impl Packet for PktCounterAttackNotify {
    const OPCODE: Opcode = Opcode::CounterAttackNotify;
}

impl<'bump> Event<'bump> for PktCounterAttackNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.skip(1)?;
        let target_id = parser.read_u64()?;
        parser.skip(1)?;
        let source_id = parser.read_u64()?;
        let r#type = parser.read_u32()?;
        Ok(Self {
            target_id,
            source_id,
            r#type,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktTriggerBossBattleStatus {
    pub trigger_id: u32,
    pub step: u32,
}

impl Packet for PktTriggerBossBattleStatus {
    const OPCODE: Opcode = Opcode::TriggerBossBattleStatus;
}

impl<'bump> Event<'bump> for PktTriggerBossBattleStatus {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let trigger_id = parser.read_u32()?;
        let step = parser.read_u32()?;
        parser.skip(2)?;
        parser.read_bool()?;
        Ok(Self { trigger_id, step })
    }
}

#[derive(serde::Serialize)]
pub struct PktPartyStatusEffectAddNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub status_effect_datas: BumpVec<'bump, StatusEffectData>,
    pub player_id_on_refresh: u64,
    pub character_id: u64,
}

impl Packet for PktPartyStatusEffectAddNotify<'_> {
    const OPCODE: Opcode = Opcode::PartyStatusEffectAddNotify;
}

impl<'bump> Event<'bump> for PktPartyStatusEffectAddNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let status_effect_datas = parser.read_counted::<StatusEffectData, u16>(bump, 80)?;
        let player_id_on_refresh = parser.read_u64()?;
        parser.read_u8()?;
        let character_id = parser.read_u64()?;
        parser.read_u64()?;
        Ok(Self {
            status_effect_datas,
            player_id_on_refresh,
            character_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktInitAbility<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub ability_data_list: BumpVec<'bump, AbilityData>,
}

impl Packet for PktInitAbility<'_> {
    const OPCODE: Opcode = Opcode::InitAbility;
}

impl<'bump> Event<'bump> for PktInitAbility<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 48, 353>::parse(parser, bump)?;
        let ability_data_list = parser.read_counted::<AbilityData, u16>(bump, 100)?;
        Ok(Self { ability_data_list })
    }
}

#[derive(serde::Serialize)]
pub struct PktSkillCastNotify {
    pub skill_level: u8,
    pub skill_id: u32,
    pub caster: u64,
}

impl Packet for PktSkillCastNotify {
    const OPCODE: Opcode = Opcode::SkillCastNotify;
}

impl<'bump> Event<'bump> for PktSkillCastNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let skill_level = parser.read_u8()?;
        let skill_id = parser.read_u32()?;
        parser.skip(2)?;
        let caster = parser.read_u64()?;
        Ok(Self {
            skill_level,
            skill_id,
            caster,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktNewTrap {
    pub trap_data: TrapData,
}

impl Packet for PktNewTrap {
    const OPCODE: Opcode = Opcode::NewTrap;
}

impl<'bump> Event<'bump> for PktNewTrap {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        let trap_data = <TrapData>::parse(parser, bump)?;
        parser.read_u8()?;
        Ok(Self { trap_data })
    }
}

#[derive(serde::Serialize)]
pub struct PktBlockSkillStateNotify {
    pub paralyzation_point: u32,
    pub r#type: u8,
    pub paralyzation_max_point: u32,
    pub object_id: u64,
}

impl Packet for PktBlockSkillStateNotify {
    const OPCODE: Opcode = Opcode::BlockSkillStateNotify;
}

impl<'bump> Event<'bump> for PktBlockSkillStateNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let paralyzation_point = parser.read_u32()?;
        let r#type = parser.read_u8()?;
        parser.skip(1)?;
        let paralyzation_max_point = parser.read_u32()?;
        parser.skip(2)?;
        let object_id = parser.read_u64()?;
        Ok(Self {
            paralyzation_point,
            r#type,
            paralyzation_max_point,
            object_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktNewNpcSummon<'bump> {
    pub publish_reason: u8,
    pub npc_data: NpcData<'bump>,
    pub owner_id: u64,
}

impl Packet for PktNewNpcSummon<'_> {
    const OPCODE: Opcode = Opcode::NewNpcSummon;
}

impl<'bump> Event<'bump> for PktNewNpcSummon<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let publish_reason = parser.read_u8()?;
        let npc_data = <NpcData>::parse(parser, bump)?;
        let owner_id = parser.read_u64()?;
        parser.skip(35)?;
        Ok(Self {
            publish_reason,
            npc_data,
            owner_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktPartyStatusEffectResultNotify {
    pub raid_instance_id: u32,
    pub character_id: u64,
    pub party_instance_id: u32,
}

impl Packet for PktPartyStatusEffectResultNotify {
    const OPCODE: Opcode = Opcode::PartyStatusEffectResultNotify;
}

impl<'bump> Event<'bump> for PktPartyStatusEffectResultNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.skip(14)?;
        let raid_instance_id = parser.read_u32()?;
        parser.skip(13)?;
        let character_id = parser.read_u64()?;
        parser.skip(1)?;
        let party_instance_id = parser.read_u32()?;
        Ok(Self {
            raid_instance_id,
            character_id,
            party_instance_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktZoneStatusEffectAddNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub zone_status_effect_data_list: BumpVec<'bump, ZoneStatusEffectData>,
}

impl Packet for PktZoneStatusEffectAddNotify<'_> {
    const OPCODE: Opcode = Opcode::ZoneStatusEffectAddNotify;
}

impl<'bump> Event<'bump> for PktZoneStatusEffectAddNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let zone_status_effect_data_list =
            parser.read_counted::<ZoneStatusEffectData, u16>(bump, 4)?;
        Ok(Self {
            zone_status_effect_data_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktZoneObjectUnpublishNotify {
    pub object_id: u64,
}

impl Packet for PktZoneObjectUnpublishNotify {
    const OPCODE: Opcode = Opcode::ZoneObjectUnpublishNotify;
}

impl<'bump> Event<'bump> for PktZoneObjectUnpublishNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.skip(1)?;
        let object_id = parser.read_u64()?;
        parser.skip(1)?;
        Ok(Self { object_id })
    }
}

#[derive(serde::Serialize)]
pub struct Sub19<'bump> {
    pub version_string: &'bump str,
}

impl<'bump> Event<'bump> for Sub19<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let version_string = parser.read_str(bump)?;
        parser.read_str(bump)?;
        parser.read_str(bump)?;
        Ok(Self { version_string })
    }
}

#[derive(serde::Serialize)]
pub struct PktInitEnv {
    pub player_id: u64,
}

impl Packet for PktInitEnv {
    const OPCODE: Opcode = Opcode::InitEnv;
}

impl<'bump> Event<'bump> for PktInitEnv {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_simple_u64()?;
        parser.read_u32()?;
        parser.read_u8()?;
        let player_id = parser.read_u64()?;
        parser.read_u32()?;
        parser.read_u64()?;
        parser.read_counted::<Sub19, u16>(bump, 64)?;
        parser.read_str(bump)?;
        Ok(Self { player_id })
    }
}

#[derive(serde::Serialize)]
pub struct PktIdentityGaugeChangeNotify {
    pub player_id: u64,
    pub identity_gauge1: u32,
    pub identity_gauge2: u32,
    pub identity_gauge3: u32,
}

impl Packet for PktIdentityGaugeChangeNotify {
    const OPCODE: Opcode = Opcode::IdentityGaugeChangeNotify;
}

impl<'bump> Event<'bump> for PktIdentityGaugeChangeNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let player_id = parser.read_u64()?;
        let identity_gauge1 = parser.read_u32()?;
        let identity_gauge2 = parser.read_u32()?;
        let identity_gauge3 = parser.read_u32()?;
        parser.skip(2)?;
        Ok(Self {
            player_id,
            identity_gauge1,
            identity_gauge2,
            identity_gauge3,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub20 {
    pub ai_state_id: u32,
}

impl<'bump> Event<'bump> for Sub20 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let ai_state_id = parser.read_u32()?;
        Ok(Self { ai_state_id })
    }
}

#[derive(serde::Serialize)]
pub struct Sub21;

impl<'bump> Event<'bump> for Sub21 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub22 {
    pub pitch_rotation: u16,
}

impl<'bump> Event<'bump> for Sub22 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let pitch_rotation = parser.read_u16()?;
        Ok(Self { pitch_rotation })
    }
}

#[derive(serde::Serialize)]
pub struct PktSkillStartNotify {
    pub aim_target_position: u64,
    pub cur_position: u64,
    pub source_id: u64,
    pub skill_level: u8,
    pub skill_option_data: SkillOptionData,
    pub cur_direction_yaw: u16,
    pub new_position: u64,
    pub skill_id: u32,
    pub new_direction_yaw: u16,
}

impl Packet for PktSkillStartNotify {
    const OPCODE: Opcode = Opcode::SkillStartNotify;
}

impl<'bump> Event<'bump> for PktSkillStartNotify {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let aim_target_position = parser.read_u64()?;
        let cur_position = parser.read_u64()?;
        let source_id = parser.read_u64()?;
        let skill_level = parser.read_u8()?;
        let skill_option_data = <SkillOptionData>::parse(parser, bump)?;
        (parser.read_bool()?)
            .then(|| <Sub20>::parse(parser, bump))
            .transpose()?;
        let cur_direction_yaw = parser.read_u16()?;
        (parser.read_bool()?)
            .then(|| <Sub21>::parse(parser, bump))
            .transpose()?;
        let new_position = parser.read_u64()?;
        let skill_id = parser.read_u32()?;
        (parser.read_bool()?)
            .then(|| <Sub22>::parse(parser, bump))
            .transpose()?;
        let new_direction_yaw = parser.read_u16()?;
        Ok(Self {
            aim_target_position,
            cur_position,
            source_id,
            skill_level,
            skill_option_data,
            cur_direction_yaw,
            new_position,
            skill_id,
            new_direction_yaw,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub23<'bump> {
    pub skill_id: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub addon_skill_feature_id_list: BumpVec<'bump, u32>,
}

impl<'bump> Event<'bump> for Sub23<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let skill_id = parser.read_u32()?;
        let addon_skill_feature_id_list = parser.read_counted::<u32, u16>(bump, 5)?;
        Ok(Self {
            skill_id,
            addon_skill_feature_id_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub24;

impl<'bump> Event<'bump> for Sub24 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub25 {
    pub value: i64,
    pub stat_type: u8,
}

impl<'bump> Event<'bump> for Sub25 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let value = parser.read_packed_i64()?;
        let stat_type = parser.read_u8()?;
        Ok(Self { value, stat_type })
    }
}

#[derive(serde::Serialize)]
pub struct PktInitLocal<'bump> {
    pub addon_feature_id_list: (),
    #[serde(serialize_with = "serialize_bumpvec")]
    pub addon_skill_feature_list: BumpVec<'bump, Sub23<'bump>>,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub status_effect_datas: BumpVec<'bump, StatusEffectData>,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub ability_data_list: BumpVec<'bump, AbilityData>,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub stat_pair: BumpVec<'bump, Sub25>,
}

impl Packet for PktInitLocal<'_> {
    const OPCODE: Opcode = Opcode::InitLocal;
}

impl<'bump> Event<'bump> for PktInitLocal<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 30, 104>::parse(parser, bump)?;
        let addon_feature_id_list = KindedBytes::<u16, 4, 200>::parse(parser, bump)?;
        let addon_skill_feature_list = parser.read_counted::<Sub23, u16>(bump, 200)?;
        parser.read_u8()?;
        let status_effect_datas = parser.read_counted::<StatusEffectData, u16>(bump, 80)?;
        parser.read_counted::<Struct751, u16>(bump, 300)?;
        (parser.read_bool()?)
            .then(|| <Sub24>::parse(parser, bump))
            .transpose()?;
        KindedBytes::<u16, 48, 353>::parse(parser, bump)?;
        parser.read_u32()?;
        parser.read_u64()?;
        parser.read_u8()?;
        let ability_data_list = parser.read_counted::<AbilityData, u16>(bump, 100)?;
        parser.read_u8()?;
        parser.read_u64()?;
        KindedBytes::<u16, 17, 3>::parse(parser, bump)?;
        let stat_pair = parser.read_counted::<Sub25, u16>(bump, 153)?;
        Ok(Self {
            addon_feature_id_list,
            addon_skill_feature_list,
            status_effect_datas,
            ability_data_list,
            stat_pair,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktPartyLeaveResult<'bump> {
    pub name: &'bump str,
    pub party_instance_id: u32,
    pub party_leave_type: u8,
}

impl Packet for PktPartyLeaveResult<'_> {
    const OPCODE: Opcode = Opcode::PartyLeaveResult;
}

impl<'bump> Event<'bump> for PktPartyLeaveResult<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let name = parser.read_str(bump)?;
        let party_instance_id = parser.read_u32()?;
        let party_leave_type = parser.read_u8()?;
        Ok(Self {
            name,
            party_instance_id,
            party_leave_type,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktPassiveStatusEffectAddNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub passive_status_effect_list: BumpVec<'bump, u32>,
}

impl Packet for PktPassiveStatusEffectAddNotify<'_> {
    const OPCODE: Opcode = Opcode::PassiveStatusEffectAddNotify;
}

impl<'bump> Event<'bump> for PktPassiveStatusEffectAddNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let passive_status_effect_list = parser.read_counted::<u32, u16>(bump, 10)?;
        Ok(Self {
            passive_status_effect_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktPartyPassiveStatusEffectAddNotify<'bump> {
    pub object_id: u64,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub passive_status_effect_list: BumpVec<'bump, u32>,
}

impl Packet for PktPartyPassiveStatusEffectAddNotify<'_> {
    const OPCODE: Opcode = Opcode::PartyPassiveStatusEffectAddNotify;
}

impl<'bump> Event<'bump> for PktPartyPassiveStatusEffectAddNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let object_id = parser.read_u64()?;
        parser.read_u8()?;
        let passive_status_effect_list = parser.read_counted::<u32, u16>(bump, 10)?;
        Ok(Self {
            object_id,
            passive_status_effect_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktPartyInfo<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub member_datas: BumpVec<'bump, PartyMemberData<'bump>>,
    pub party_loot_type: u8,
    pub loot_grade: u32,
    pub party_type: u8,
    pub raid_instance_id: u32,
    pub party_instance_id: u32,
}

impl Packet for PktPartyInfo<'_> {
    const OPCODE: Opcode = Opcode::PartyInfo;
}

impl<'bump> Event<'bump> for PktPartyInfo<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let member_datas = parser.read_counted::<PartyMemberData, u16>(bump, 40)?;
        let party_loot_type = parser.read_u8()?;
        let loot_grade = parser.read_u32()?;
        let party_type = parser.read_u8()?;
        let raid_instance_id = parser.read_u32()?;
        let party_instance_id = parser.read_u32()?;
        Ok(Self {
            member_datas,
            party_loot_type,
            loot_grade,
            party_type,
            raid_instance_id,
            party_instance_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktTriggerFinishNotify<'bump> {
    pub packet_result_code: u32,
    pub trigger_id: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub involved_p_cs: BumpVec<'bump, u64>,
}

impl Packet for PktTriggerFinishNotify<'_> {
    const OPCODE: Opcode = Opcode::TriggerFinishNotify;
}

impl<'bump> Event<'bump> for PktTriggerFinishNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        let packet_result_code = parser.read_u32()?;
        let trigger_id = parser.read_u32()?;
        let involved_p_cs = parser.read_counted::<u64, u16>(bump, 40)?;
        Ok(Self {
            packet_result_code,
            trigger_id,
            involved_p_cs,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktPartyStatusEffectRemoveNotify<'bump> {
    pub character_id: u64,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub status_effect_ids: BumpVec<'bump, u32>,
    pub reason: u8,
}

impl Packet for PktPartyStatusEffectRemoveNotify<'_> {
    const OPCODE: Opcode = Opcode::PartyStatusEffectRemoveNotify;
}

impl<'bump> Event<'bump> for PktPartyStatusEffectRemoveNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u64()?;
        let character_id = parser.read_u64()?;
        let status_effect_ids = parser.read_counted::<u32, u16>(bump, 80)?;
        let reason = parser.read_u8()?;
        Ok(Self {
            character_id,
            status_effect_ids,
            reason,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktTriggerStartNotify<'bump> {
    pub source_id: u64,
    pub trigger_signal_type: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub involved_p_cs: BumpVec<'bump, u64>,
    pub trigger_id: u32,
}

impl Packet for PktTriggerStartNotify<'_> {
    const OPCODE: Opcode = Opcode::TriggerStartNotify;
}

impl<'bump> Event<'bump> for PktTriggerStartNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let source_id = parser.read_u64()?;
        let trigger_signal_type = parser.read_u32()?;
        let involved_p_cs = parser.read_counted::<u64, u16>(bump, 40)?;
        let trigger_id = parser.read_u32()?;
        Ok(Self {
            source_id,
            trigger_signal_type,
            involved_p_cs,
            trigger_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktZoneMemberLoadStatusNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub total_members: BumpVec<'bump, u64>,
    pub zone_inst_id: u64,
    pub load_complete: bool,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub complete_members: BumpVec<'bump, u64>,
    pub zone_id: u32,
    pub zone_level: u8,
    pub first_pc_enter_tick: u64,
}

impl Packet for PktZoneMemberLoadStatusNotify<'_> {
    const OPCODE: Opcode = Opcode::ZoneMemberLoadStatusNotify;
}

impl<'bump> Event<'bump> for PktZoneMemberLoadStatusNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let total_members = parser.read_counted::<u64, u16>(bump, 40)?;
        let zone_inst_id = parser.read_u64()?;
        let load_complete = parser.read_bool()?;
        let complete_members = parser.read_counted::<u64, u16>(bump, 40)?;
        let zone_id = parser.read_u32()?;
        let zone_level = parser.read_u8()?;
        let first_pc_enter_tick = parser.read_u64()?;
        Ok(Self {
            total_members,
            zone_inst_id,
            load_complete,
            complete_members,
            zone_id,
            zone_level,
            first_pc_enter_tick,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktNewProjectile {
    pub projectile_info: ProjectileInfo,
}

impl Packet for PktNewProjectile {
    const OPCODE: Opcode = Opcode::NewProjectile;
}

impl<'bump> Event<'bump> for PktNewProjectile {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let projectile_info = <ProjectileInfo>::parse(parser, bump)?;
        Ok(Self { projectile_info })
    }
}

#[derive(serde::Serialize)]
pub struct PktZoneStatusEffectRemoveNotify {
    pub status_effect_id: u32,
}

impl Packet for PktZoneStatusEffectRemoveNotify {
    const OPCODE: Opcode = Opcode::ZoneStatusEffectRemoveNotify;
}

impl<'bump> Event<'bump> for PktZoneStatusEffectRemoveNotify {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.skip(3)?;
        let status_effect_id = parser.read_u32()?;
        Ok(Self { status_effect_id })
    }
}

#[derive(serde::Serialize)]
pub struct PktRemoveObject<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub unpublished_objects: BumpVec<'bump, UnpublishObject>,
}

impl Packet for PktRemoveObject<'_> {
    const OPCODE: Opcode = Opcode::RemoveObject;
}

impl<'bump> Event<'bump> for PktRemoveObject<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let unpublished_objects = parser.read_counted::<UnpublishObject, u16>(bump, 200)?;
        Ok(Self {
            unpublished_objects,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub26 {
    pub value: i64,
    pub stat_type: u8,
}

impl<'bump> Event<'bump> for Sub26 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let value = parser.read_packed_i64()?;
        let stat_type = parser.read_u8()?;
        Ok(Self { value, stat_type })
    }
}

#[derive(serde::Serialize)]
pub struct Sub27;

impl<'bump> Event<'bump> for Sub27 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub28 {
    pub value: i64,
    pub stat_type: u8,
}

impl<'bump> Event<'bump> for Sub28 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let value = parser.read_packed_i64()?;
        let stat_type = parser.read_u8()?;
        Ok(Self { value, stat_type })
    }
}

#[derive(serde::Serialize)]
pub struct PktStatChangeOriginNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub stat_pair_list: BumpVec<'bump, Sub26>,
    pub object_id: u64,
}

impl Packet for PktStatChangeOriginNotify<'_> {
    const OPCODE: Opcode = Opcode::StatChangeOriginNotify;
}

impl<'bump> Event<'bump> for PktStatChangeOriginNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let stat_pair_list = parser.read_counted::<Sub26, u16>(bump, 153)?;
        let object_id = parser.read_u64()?;
        (parser.read_bool()?)
            .then(|| <Sub27>::parse(parser, bump))
            .transpose()?;
        parser.read_counted::<Sub28, u16>(bump, 153)?;
        parser.read_u8()?;
        Ok(Self {
            stat_pair_list,
            object_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktPartyPassiveStatusEffectRemoveNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub passive_status_effect_list: BumpVec<'bump, u32>,
    pub object_id: u64,
}

impl Packet for PktPartyPassiveStatusEffectRemoveNotify<'_> {
    const OPCODE: Opcode = Opcode::PartyPassiveStatusEffectRemoveNotify;
}

impl<'bump> Event<'bump> for PktPartyPassiveStatusEffectRemoveNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let passive_status_effect_list = parser.read_counted::<u32, u16>(bump, 10)?;
        let object_id = parser.read_u64()?;
        Ok(Self {
            passive_status_effect_list,
            object_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub29;

impl<'bump> Event<'bump> for Sub29 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_packed_i64()?;
        parser.read_u32()?;
        parser.read_packed_i64()?;
        KindedBytes::<u16, 1, 3>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct PktRaidResult {
    pub raid_result: u8,
}

impl Packet for PktRaidResult {
    const OPCODE: Opcode = Opcode::RaidResult;
}

impl<'bump> Event<'bump> for PktRaidResult {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_counted::<Sub29, u16>(bump, 3)?;
        parser.read_u64()?;
        parser.read_u64()?;
        parser.read_u8()?;
        parser.read_u8()?;
        parser.read_u64()?;
        let raid_result = parser.read_u8()?;
        parser.read_u64()?;
        Ok(Self { raid_result })
    }
}

#[derive(serde::Serialize)]
pub struct PktAbilityChangeNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub ability_data_list: BumpVec<'bump, AbilityData>,
}

impl Packet for PktAbilityChangeNotify<'_> {
    const OPCODE: Opcode = Opcode::AbilityChangeNotify;
}

impl<'bump> Event<'bump> for PktAbilityChangeNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let ability_data_list = parser.read_counted::<AbilityData, u16>(bump, 100)?;
        Ok(Self { ability_data_list })
    }
}

#[derive(serde::Serialize)]
pub struct PktMigrationExecute<'bump> {
    pub server_addr: &'bump str,
    pub account_character_id1: u64,
    pub account_character_id2: u64,
}

impl Packet for PktMigrationExecute<'_> {
    const OPCODE: Opcode = Opcode::MigrationExecute;
}

impl<'bump> Event<'bump> for PktMigrationExecute<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let server_addr = parser.read_str(bump)?;
        let account_character_id1 = parser.read_u64()?;
        parser.read_u32()?;
        let account_character_id2 = parser.read_u64()?;
        Ok(Self {
            server_addr,
            account_character_id1,
            account_character_id2,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktEquipChangeNotify<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub equip_item_data_list: BumpVec<'bump, EquipItemData>,
    pub object_id: u64,
}

impl Packet for PktEquipChangeNotify<'_> {
    const OPCODE: Opcode = Opcode::EquipChangeNotify;
}

impl<'bump> Event<'bump> for PktEquipChangeNotify<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let equip_item_data_list = parser.read_counted::<EquipItemData, u16>(bump, 33)?;
        let object_id = parser.read_u64()?;
        parser.read_u32()?;
        parser.read_u32()?;
        Ok(Self {
            equip_item_data_list,
            object_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PktRaidBegin<'bump> {
    pub raid_result: u8,
    pub total_time: u64,
    pub end_tick: u64,
    pub brave_heart_count: u8,
    pub init_brave_heart_count: u8,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub boss_kill_data_list: BumpVec<'bump, BossKillData>,
    pub start_tick: u64,
    pub raid_id: u32,
}

impl Packet for PktRaidBegin<'_> {
    const OPCODE: Opcode = Opcode::RaidBegin;
}

impl<'bump> Event<'bump> for PktRaidBegin<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let raid_result = parser.read_u8()?;
        let total_time = parser.read_u64()?;
        parser.read_bool()?;
        parser.read_u64()?;
        let end_tick = parser.read_u64()?;
        parser.read_bool()?;
        parser.read_u64()?;
        parser.read_bool()?;
        let brave_heart_count = parser.read_u8()?;
        let init_brave_heart_count = parser.read_u8()?;
        let boss_kill_data_list = parser.read_counted::<BossKillData, u16>(bump, 3)?;
        parser.read_u64()?;
        let start_tick = parser.read_u64()?;
        let raid_id = parser.read_u32()?;
        Ok(Self {
            raid_result,
            total_time,
            end_tick,
            brave_heart_count,
            init_brave_heart_count,
            boss_kill_data_list,
            start_tick,
            raid_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PartyMemberData<'bump> {
    pub name: &'bump str,
    pub world_id: u8,
    pub auths: u8,
    pub position: u64,
    pub zone_inst_id: u64,
    pub class_id: u16,
    pub transit_index: u32,
    pub max_hp: i64,
    pub party_member_number: u8,
    pub gear_level: f32,
    pub cur_hp: i64,
    pub character_id: u64,
    pub zone_id: u32,
    pub character_level: u16,
}

impl<'bump> Event<'bump> for PartyMemberData<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let name = parser.read_str(bump)?;
        let world_id = parser.read_u8()?;
        let auths = parser.read_u8()?;
        let position = parser.read_u64()?;
        let zone_inst_id = parser.read_u64()?;
        let class_id = parser.read_u16()?;
        parser.read_u8()?;
        let transit_index = parser.read_u32()?;
        parser.read_u16()?;
        parser.read_u8()?;
        parser.read_u8()?;
        parser.read_u8()?;
        let max_hp = parser.read_packed_i64()?;
        let party_member_number = parser.read_u8()?;
        let gear_level = parser.read_f32()?;
        parser.read_u8()?;
        let cur_hp = parser.read_packed_i64()?;
        let character_id = parser.read_u64()?;
        let zone_id = parser.read_u32()?;
        let character_level = parser.read_u16()?;
        Ok(Self {
            name,
            world_id,
            auths,
            position,
            zone_inst_id,
            class_id,
            transit_index,
            max_hp,
            party_member_number,
            gear_level,
            cur_hp,
            character_id,
            zone_id,
            character_level,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub30;

impl<'bump> Event<'bump> for Sub30 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <Struct746>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Struct786;

impl<'bump> Event<'bump> for Struct786 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 1, 7>::parse(parser, bump)?;
        KindedBytes::<u16, 1, 7>::parse(parser, bump)?;
        (parser.read_bool()?)
            .then(|| <Sub30>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Struct144 {
    pub unk0: u16,
}

impl<'bump> Event<'bump> for Struct144 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let unk0 = parser.read_u16()?;
        (unk0 == 1)
            .then(|| parser.read_counted::<u8, i64>(bump, unk0 as _))
            .transpose()?;
        Ok(Self { unk0 })
    }
}

#[derive(serde::Serialize)]
pub struct AbilityData {
    pub points: u16,
    pub id: u32,
    pub level: u8,
}

impl<'bump> Event<'bump> for AbilityData {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let points = parser.read_u16()?;
        let id = parser.read_u32()?;
        let level = parser.read_u8()?;
        Ok(Self { points, id, level })
    }
}

#[derive(serde::Serialize)]
pub struct Sub32;

impl<'bump> Event<'bump> for Sub32 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub33;

impl<'bump> Event<'bump> for Sub33 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub34;

impl<'bump> Event<'bump> for Sub34 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub35 {
    pub balance_level: u16,
}

impl<'bump> Event<'bump> for Sub35 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let balance_level = parser.read_u16()?;
        Ok(Self { balance_level })
    }
}

#[derive(serde::Serialize)]
pub struct Sub36;

impl<'bump> Event<'bump> for Sub36 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub37;

impl<'bump> Event<'bump> for Sub37 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <Struct730>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub38;

impl<'bump> Event<'bump> for Sub38 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u64()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub39;

impl<'bump> Event<'bump> for Sub39 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 9, 11>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub40;

impl<'bump> Event<'bump> for Sub40 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub41;

impl<'bump> Event<'bump> for Sub41 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u16()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub42;

impl<'bump> Event<'bump> for Sub42 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub43 {
    pub transit_index: u32,
}

impl<'bump> Event<'bump> for Sub43 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let transit_index = parser.read_u32()?;
        Ok(Self { transit_index })
    }
}

#[derive(serde::Serialize)]
pub struct Sub44;

impl<'bump> Event<'bump> for Sub44 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub45;

impl<'bump> Event<'bump> for Sub45 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub46 {
    pub value: i64,
    pub stat_type: u8,
}

impl<'bump> Event<'bump> for Sub46 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let value = parser.read_packed_i64()?;
        let stat_type = parser.read_u8()?;
        Ok(Self { value, stat_type })
    }
}

#[derive(serde::Serialize)]
pub struct Sub47;

impl<'bump> Event<'bump> for Sub47 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 12, 12>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub48;

impl<'bump> Event<'bump> for Sub48 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub49;

impl<'bump> Event<'bump> for Sub49 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub50;

impl<'bump> Event<'bump> for Sub50 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct NpcData<'bump> {
    pub object_id: u64,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub status_effect_datas: BumpVec<'bump, StatusEffectData>,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub period_update_stat_data_list: BumpVec<'bump, PeriodUpdateStatData>,
    pub type_id: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub stat_pair: BumpVec<'bump, Sub46>,
    pub level: u16,
    pub direction_yaw: u16,
    pub position: u64,
    pub spawn_index: u32,
}

impl<'bump> Event<'bump> for NpcData<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let object_id = parser.read_u64()?;
        parser.read_u8()?;
        (parser.read_bool()?)
            .then(|| <Sub32>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub33>::parse(parser, bump))
            .transpose()?;
        let status_effect_datas = parser.read_counted::<StatusEffectData, u16>(bump, 80)?;
        (parser.read_bool()?)
            .then(|| <Sub34>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub35>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub36>::parse(parser, bump))
            .transpose()?;
        let period_update_stat_data_list =
            parser.read_counted::<PeriodUpdateStatData, u16>(bump, 5)?;
        parser.read_u8()?;
        parser.read_u8()?;
        (parser.read_bool()?)
            .then(|| <Sub37>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub38>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub39>::parse(parser, bump))
            .transpose()?;
        let type_id = parser.read_u32()?;
        (parser.read_bool()?)
            .then(|| <Sub40>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub41>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        (parser.read_bool()?)
            .then(|| <Sub42>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub43>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub44>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        (parser.read_bool()?)
            .then(|| <Sub45>::parse(parser, bump))
            .transpose()?;
        let stat_pair = parser.read_counted::<Sub46, u16>(bump, 153)?;
        let level = parser.read_u16()?;
        let direction_yaw = parser.read_u16()?;
        let position = parser.read_u64()?;
        (parser.read_bool()?)
            .then(|| <Sub47>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub48>::parse(parser, bump))
            .transpose()?;
        let spawn_index = parser.read_u32()?;
        (parser.read_bool()?)
            .then(|| <Sub49>::parse(parser, bump))
            .transpose()?;
        (parser.read_bool()?)
            .then(|| <Sub50>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        Ok(Self {
            object_id,
            status_effect_datas,
            period_update_stat_data_list,
            type_id,
            stat_pair,
            level,
            direction_yaw,
            position,
            spawn_index,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Struct746;

impl<'bump> Event<'bump> for Struct746 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u16()?;
        parser.read_u8()?;
        KindedBytes::<u32, 1, 51>::parse(parser, bump)?;
        parser.read_u16()?;
        parser.read_u8()?;
        <[u8; 3]>::parse(parser, bump)?;
        parser.read_u8()?;
        parser.read_u16()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub51 {
    pub value: i64,
    pub stat_type: u8,
}

impl<'bump> Event<'bump> for Sub51 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let value = parser.read_packed_i64()?;
        let stat_type = parser.read_u8()?;
        Ok(Self { value, stat_type })
    }
}

#[derive(serde::Serialize)]
pub struct Sub52 {
    pub grabbed_data: [u8; 12],
}

impl<'bump> Event<'bump> for Sub52 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let grabbed_data = <[u8; 12]>::parse(parser, bump)?;
        Ok(Self { grabbed_data })
    }
}

#[derive(serde::Serialize)]
pub struct Sub53<'bump> {
    pub skill_id: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub addon_skill_feature_id_list: BumpVec<'bump, u32>,
}

impl<'bump> Event<'bump> for Sub53<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let skill_id = parser.read_u32()?;
        let addon_skill_feature_id_list = parser.read_counted::<u32, u16>(bump, 5)?;
        Ok(Self {
            skill_id,
            addon_skill_feature_id_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct PcStruct<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub period_update_stat_data_list: BumpVec<'bump, PeriodUpdateStatData>,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub stat_pair: BumpVec<'bump, Sub51>,
    pub max_item_level: f32,
    pub character_id: u64,
    pub heading: u16,
    pub name: &'bump str,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub status_effect_datas: BumpVec<'bump, StatusEffectData>,
    pub position: u64,
    pub avg_item_level: f32,
    pub pet_id: u32,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub equip_item_data_list: BumpVec<'bump, EquipItemData>,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub equip_life_tool_data_list: BumpVec<'bump, EquipItemData>,
    pub second_honor_title_id: u16,
    pub look_data: (),
    pub world_id: u8,
    pub guild_id: u64,
    pub first_honor_title_id: u16,
    pub avatar_hide: u8,
    pub addon_feature_id_list: (),
    pub rv_r_level: u16,
    pub guild_name: &'bump str,
    #[serde(serialize_with = "serialize_bumpvec")]
    pub addon_skill_feature_list: BumpVec<'bump, Sub53<'bump>>,
    pub class_id: u16,
    pub level: u16,
    pub identity_data: [u8; 25],
    pub player_id: u64,
}

impl<'bump> Event<'bump> for PcStruct<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        let period_update_stat_data_list =
            parser.read_counted::<PeriodUpdateStatData, u16>(bump, 5)?;
        let stat_pair = parser.read_counted::<Sub51, u16>(bump, 153)?;
        let max_item_level = parser.read_f32()?;
        let character_id = parser.read_u64()?;
        (parser.read_bool()?)
            .then(|| <Sub52>::parse(parser, bump))
            .transpose()?;
        let heading = parser.read_u16()?;
        parser.read_u8()?;
        let name = parser.read_str(bump)?;
        let status_effect_datas = parser.read_counted::<StatusEffectData, u16>(bump, 80)?;
        let position = parser.read_u64()?;
        let avg_item_level = parser.read_f32()?;
        let pet_id = parser.read_u32()?;
        parser.read_u8()?;
        parser.read_u32()?;
        parser.read_u8()?;
        let equip_item_data_list = parser.read_counted::<EquipItemData, u16>(bump, 33)?;
        parser.read_u8()?;
        let equip_life_tool_data_list = parser.read_counted::<EquipItemData, u16>(bump, 9)?;
        let second_honor_title_id = parser.read_u16()?;
        parser.read_u64()?;
        parser.read_u32()?;
        parser.read_u8()?;
        let look_data = KindedBytes::<u32, 1, 512>::parse(parser, bump)?;
        <[u8; 5]>::parse(parser, bump)?;
        let world_id = parser.read_u8()?;
        let guild_id = parser.read_u64()?;
        let first_honor_title_id = parser.read_u16()?;
        let avatar_hide = parser.read_u8()?;
        parser.read_u32()?;
        let addon_feature_id_list = KindedBytes::<u16, 4, 200>::parse(parser, bump)?;
        parser.read_u8()?;
        parser.read_u8()?;
        let rv_r_level = parser.read_u16()?;
        parser.read_u32()?;
        let guild_name = parser.read_str(bump)?;
        let addon_skill_feature_list = parser.read_counted::<Sub53, u16>(bump, 200)?;
        parser.read_u32()?;
        parser.read_u32()?;
        parser.read_u8()?;
        parser.read_u8()?;
        parser.read_u8()?;
        let class_id = parser.read_u16()?;
        let level = parser.read_u16()?;
        let identity_data = <[u8; 25]>::parse(parser, bump)?;
        let player_id = parser.read_u64()?;
        Ok(Self {
            period_update_stat_data_list,
            stat_pair,
            max_item_level,
            character_id,
            heading,
            name,
            status_effect_datas,
            position,
            avg_item_level,
            pet_id,
            equip_item_data_list,
            equip_life_tool_data_list,
            second_honor_title_id,
            look_data,
            world_id,
            guild_id,
            first_honor_title_id,
            avatar_hide,
            addon_feature_id_list,
            rv_r_level,
            guild_name,
            addon_skill_feature_list,
            class_id,
            level,
            identity_data,
            player_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub54;

impl<'bump> Event<'bump> for Sub54 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 9]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub55;

impl<'bump> Event<'bump> for Sub55 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Struct751;

impl<'bump> Event<'bump> for Struct751 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        (parser.read_bool()?)
            .then(|| <Sub54>::parse(parser, bump))
            .transpose()?;
        parser.read_u32()?;
        parser.read_u32()?;
        (parser.read_bool()?)
            .then(|| <Sub55>::parse(parser, bump))
            .transpose()?;
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub56;

impl<'bump> Event<'bump> for Sub56 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct EquipItemData {
    pub slot: u16,
    pub expire_time: u64,
    pub level: u16,
    pub item_tint: (),
    pub id: u32,
}

impl<'bump> Event<'bump> for EquipItemData {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let slot = parser.read_u16()?;
        let expire_time = parser.read_simple_u64()?;
        let level = parser.read_u16()?;
        (parser.read_bool()?)
            .then(|| <Sub56>::parse(parser, bump))
            .transpose()?;
        let item_tint = KindedBytes::<u16, 14, 5>::parse(parser, bump)?;
        let id = parser.read_u32()?;
        Ok(Self {
            slot,
            expire_time,
            level,
            item_tint,
            id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Struct661;

impl<'bump> Event<'bump> for Struct661 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        KindedBytes::<u16, 18, 10>::parse(parser, bump)?;
        parser.read_u64()?;
        KindedBytes::<u16, 10, 2>::parse(parser, bump)?;
        parser.read_u32()?;
        parser.read_u32()?;
        parser.read_u32()?;
        parser.read_u16()?;
        parser.read_u8()?;
        KindedBytes::<u16, 9, 10>::parse(parser, bump)?;
        parser.read_u32()?;
        parser.read_u32()?;
        parser.read_counted::<Struct654, u16>(bump, 3)?;
        KindedBytes::<u16, 9, 2>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub57;

impl<'bump> Event<'bump> for Sub57 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 9]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub58 {
    pub serial_number: u64,
    pub id: u32,
    pub level: u16,
    pub slot: u16,
    pub durability: u32,
    pub flag: u32,
    pub expire_time: u64,
    pub lock_update_time: u64,
}

impl<'bump> Event<'bump> for Sub58 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let serial_number = parser.read_u64()?;
        let id = parser.read_u32()?;
        let level = parser.read_u16()?;
        let slot = parser.read_u16()?;
        let durability = parser.read_u32()?;
        parser.read_u32()?;
        let flag = parser.read_u32()?;
        let expire_time = parser.read_simple_u64()?;
        let lock_update_time = parser.read_simple_u64()?;
        (parser.read_bool()?)
            .then(|| <Sub57>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        parser.read_u8()?;
        parser.read_u32()?;
        <Struct560>::parse(parser, bump)?;
        parser.read_u32()?;
        Ok(Self {
            serial_number,
            id,
            level,
            slot,
            durability,
            flag,
            expire_time,
            lock_update_time,
        })
    }
}

#[derive(serde::Serialize)]
pub struct ItemData {
    pub count: u32,
}

impl<'bump> Event<'bump> for ItemData {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let count = parser.read_u32()?;
        (count > 0)
            .then(|| <Sub58>::parse(parser, bump))
            .transpose()?;
        Ok(Self { count })
    }
}

#[derive(serde::Serialize)]
pub struct Sub59;

impl<'bump> Event<'bump> for Sub59 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 9, 11>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct TrapData {
    pub skill_effect: u32,
    pub position: u64,
    pub object_id: u64,
    pub skill_id: u32,
    pub owner_id: u64,
}

impl<'bump> Event<'bump> for TrapData {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let skill_effect = parser.read_u32()?;
        parser.read_u8()?;
        let position = parser.read_u64()?;
        parser.read_u8()?;
        let object_id = parser.read_u64()?;
        let skill_id = parser.read_u32()?;
        parser.read_u32()?;
        parser.read_u8()?;
        let owner_id = parser.read_u64()?;
        parser.read_u32()?;
        (parser.read_bool()?)
            .then(|| <Sub59>::parse(parser, bump))
            .transpose()?;
        parser.read_u32()?;
        parser.read_u16()?;
        Ok(Self {
            skill_effect,
            position,
            object_id,
            skill_id,
            owner_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub60;

impl<'bump> Event<'bump> for Sub60 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub61;

impl<'bump> Event<'bump> for Sub61 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u64()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub62;

impl<'bump> Event<'bump> for Sub62 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 9, 11>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct ProjectileInfo {
    pub target_object_id: u64,
    pub owner_id: u64,
    pub chain_skill_effect: u32,
    pub tripod_level: TripodLevel,
    pub skill_id: u32,
    pub projectile_id: u64,
    pub skill_effect: u32,
    pub skill_level: u8,
    pub tripod_index: TripodIndex,
}

impl<'bump> Event<'bump> for ProjectileInfo {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        parser.read_u16()?;
        (parser.read_bool()?)
            .then(|| <Sub60>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        let target_object_id = parser.read_u64()?;
        parser.read_u32()?;
        parser.read_u64()?;
        let owner_id = parser.read_u64()?;
        let chain_skill_effect = parser.read_u32()?;
        parser.read_u8()?;
        parser.read_u64()?;
        let tripod_level = <TripodLevel>::parse(parser, bump)?;
        let skill_id = parser.read_u32()?;
        let projectile_id = parser.read_u64()?;
        parser.read_u16()?;
        (parser.read_bool()?)
            .then(|| <Sub61>::parse(parser, bump))
            .transpose()?;
        parser.read_u32()?;
        let skill_effect = parser.read_u32()?;
        let skill_level = parser.read_u8()?;
        (parser.read_bool()?)
            .then(|| <Sub62>::parse(parser, bump))
            .transpose()?;
        let tripod_index = <TripodIndex>::parse(parser, bump)?;
        Ok(Self {
            target_object_id,
            owner_id,
            chain_skill_effect,
            tripod_level,
            skill_id,
            projectile_id,
            skill_effect,
            skill_level,
            tripod_index,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub63;

impl<'bump> Event<'bump> for Sub63 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        KindedBytes::<u16, 1, 10>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Struct605<'bump> {
    #[serde(serialize_with = "serialize_bumpvec")]
    pub boss_kill_data_list: BumpVec<'bump, BossKillData>,
}

impl<'bump> Event<'bump> for Struct605<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_counted::<Sub63, u16>(bump, 3)?;
        parser.read_u32()?;
        parser.read_u8()?;
        let boss_kill_data_list = parser.read_counted::<BossKillData, u16>(bump, 3)?;
        parser.read_u8()?;
        Ok(Self {
            boss_kill_data_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub64;

impl<'bump> Event<'bump> for Sub64 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u64()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub65 {
    pub value: [u8; 16],
}

impl<'bump> Event<'bump> for Sub65 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let value = <[u8; 16]>::parse(parser, bump)?;
        Ok(Self { value })
    }
}

#[derive(serde::Serialize)]
pub struct StatusEffectData {
    pub stack_count: u8,
    pub skill_level: u8,
    pub total_time: f32,
    pub end_tick: u64,
    pub effect_instance_id: u32,
    pub occur_time: u64,
    pub source_id: u64,
    pub status_effect_id: u32,
}

impl<'bump> Event<'bump> for StatusEffectData {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let stack_count = parser.read_u8()?;
        let skill_level = parser.read_u8()?;
        let total_time = parser.read_f32()?;
        let end_tick = parser.read_u64()?;
        KindedBytes::<u16, 7, 8>::parse(parser, bump)?;
        let effect_instance_id = parser.read_u32()?;
        let occur_time = parser.read_simple_u64()?;
        (parser.read_bool()?)
            .then(|| <Sub64>::parse(parser, bump))
            .transpose()?;
        let source_id = parser.read_u64()?;
        (parser.read_bool()?)
            .then(|| <Sub65>::parse(parser, bump))
            .transpose()?;
        let status_effect_id = parser.read_u32()?;
        Ok(Self {
            stack_count,
            skill_level,
            total_time,
            end_tick,
            effect_instance_id,
            occur_time,
            source_id,
            status_effect_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct UnpublishObject {
    pub unpublish_reason: u8,
    pub object_id: u64,
}

impl<'bump> Event<'bump> for UnpublishObject {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let unpublish_reason = parser.read_u8()?;
        let object_id = parser.read_u64()?;
        Ok(Self {
            unpublish_reason,
            object_id,
        })
    }
}

#[derive(serde::Serialize)]
pub struct ActiveAbility {
    pub level: u32,
    pub feature_type: u16,
}

impl<'bump> Event<'bump> for ActiveAbility {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let level = parser.read_u32()?;
        let feature_type = parser.read_u16()?;
        Ok(Self {
            level,
            feature_type,
        })
    }
}

#[derive(serde::Serialize)]
pub struct BossKillData {
    pub is_dead: bool,
    pub npc_id: u32,
}

impl<'bump> Event<'bump> for BossKillData {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let is_dead = parser.read_bool()?;
        let npc_id = parser.read_u32()?;
        Ok(Self { is_dead, npc_id })
    }
}

#[derive(serde::Serialize)]
pub struct Sub66;

impl<'bump> Event<'bump> for Sub66 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 12]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct TrackMoveInfo;

impl<'bump> Event<'bump> for TrackMoveInfo {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        (parser.read_bool()?)
            .then(|| <Sub66>::parse(parser, bump))
            .transpose()?;
        <[u8; 12]>::parse(parser, bump)?;
        parser.read_u32()?;
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct PeriodUpdateStatData;

impl<'bump> Event<'bump> for PeriodUpdateStatData {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_packed_i64()?;
        parser.read_u16()?;
        parser.read_u8()?;
        parser.read_u64()?;
        parser.read_packed_i64()?;
        parser.read_u8()?;
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub67;

impl<'bump> Event<'bump> for Sub67 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 9]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub68;

impl<'bump> Event<'bump> for Sub68 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 32, 2>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub69;

impl<'bump> Event<'bump> for Sub69 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        KindedBytes::<u16, 30, 5>::parse(parser, bump)?;
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub70;

impl<'bump> Event<'bump> for Sub70 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <Struct786>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Struct660 {
    pub item_tint: (),
}

impl<'bump> Event<'bump> for Struct660 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        parser.read_u32()?;
        parser.read_u32()?;
        (parser.read_bool()?)
            .then(|| <Sub67>::parse(parser, bump))
            .transpose()?;
        KindedBytes::<u16, 21, 3>::parse(parser, bump)?;
        (parser.read_bool()?)
            .then(|| <Sub68>::parse(parser, bump))
            .transpose()?;
        parser.read_u8()?;
        (parser.read_bool()?)
            .then(|| <Sub69>::parse(parser, bump))
            .transpose()?;
        parser.read_u32()?;
        KindedBytes::<u16, 7, 3>::parse(parser, bump)?;
        KindedBytes::<u16, 10, 3>::parse(parser, bump)?;
        let item_tint = KindedBytes::<u16, 14, 5>::parse(parser, bump)?;
        parser.read_u32()?;
        KindedBytes::<u16, 29, 10>::parse(parser, bump)?;
        parser.read_u32()?;
        (parser.read_bool()?)
            .then(|| <Sub70>::parse(parser, bump))
            .transpose()?;
        Ok(Self { item_tint })
    }
}

#[derive(serde::Serialize)]
pub struct Sub71;

impl<'bump> Event<'bump> for Sub71 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        parser.read_str(bump)?;
        parser.read_u16()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Struct653;

impl<'bump> Event<'bump> for Struct653 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_counted::<Sub71, u16>(bump, 20)?;
        KindedBytes::<u16, 7, 3>::parse(parser, bump)?;
        parser.read_u8()?;
        KindedBytes::<u16, 7, 5>::parse(parser, bump)?;
        parser.read_u8()?;
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct ZoneStatusEffectData {
    pub instance_id: u32,
    pub stack_count: u8,
    pub id: u32,
    pub target: u8,
}

impl<'bump> Event<'bump> for ZoneStatusEffectData {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let instance_id = parser.read_u32()?;
        parser.skip(4)?;
        let stack_count = parser.read_u8()?;
        let id = parser.read_u32()?;
        let target = parser.read_u8()?;
        Ok(Self {
            instance_id,
            stack_count,
            id,
            target,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Struct654;

impl<'bump> Event<'bump> for Struct654 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        parser.read_u8()?;
        parser.read_u8()?;
        <Struct144>::parse(parser, bump)?;
        parser.read_u8()?;
        parser.read_u32()?;
        parser.read_u8()?;
        KindedBytes::<u16, 9, 3>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct SkillDamageAbnormalMoveEvent {
    pub skill_damage_event: SkillDamageEvent,
    pub destination: u64,
    pub skill_move_option_data: SkillMoveOptionData,
    pub position: u64,
}

impl<'bump> Event<'bump> for SkillDamageAbnormalMoveEvent {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u64()?;
        let skill_damage_event = <SkillDamageEvent>::parse(parser, bump)?;
        parser.read_u16()?;
        let destination = parser.read_u64()?;
        parser.read_u16()?;
        let skill_move_option_data = <SkillMoveOptionData>::parse(parser, bump)?;
        parser.read_u8()?;
        parser.read_u16()?;
        let position = parser.read_u64()?;
        Ok(Self {
            skill_damage_event,
            destination,
            skill_move_option_data,
            position,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Struct730<'bump> {
    pub look_data: (),
    #[serde(serialize_with = "serialize_bumpvec")]
    pub equip_item_data_list: BumpVec<'bump, EquipItemData>,
}

impl<'bump> Event<'bump> for Struct730<'bump> {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_str(bump)?;
        parser.read_u8()?;
        let look_data = KindedBytes::<u32, 1, 512>::parse(parser, bump)?;
        parser.read_u64()?;
        parser.read_u8()?;
        let equip_item_data_list = parser.read_counted::<EquipItemData, u16>(bump, 33)?;
        parser.read_u8()?;
        parser.read_u64()?;
        parser.read_u16()?;
        Ok(Self {
            look_data,
            equip_item_data_list,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub72 {
    pub damage_attr: u8,
}

impl<'bump> Event<'bump> for Sub72 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let damage_attr = parser.read_u8()?;
        Ok(Self { damage_attr })
    }
}

#[derive(serde::Serialize)]
pub struct SkillDamageEvent {
    pub max_hp: i64,
    pub cur_hp: i64,
    pub damage: i64,
    pub modifier: u8,
    pub target_id: u64,
    pub damage_type: u8,
}

impl<'bump> Event<'bump> for SkillDamageEvent {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let max_hp = parser.read_packed_i64()?;
        let cur_hp = parser.read_packed_i64()?;
        (parser.read_bool()?)
            .then(|| <Sub72>::parse(parser, bump))
            .transpose()?;
        let damage = parser.read_packed_i64()?;
        parser.read_u16()?;
        let modifier = parser.read_u8()?;
        let target_id = parser.read_u64()?;
        let damage_type = parser.read_u8()?;
        Ok(Self {
            max_hp,
            cur_hp,
            damage,
            modifier,
            target_id,
            damage_type,
        })
    }
}

#[derive(serde::Serialize)]
pub struct Sub73;

impl<'bump> Event<'bump> for Sub73 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <Struct661>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub74;

impl<'bump> Event<'bump> for Sub74 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u32()?;
        KindedBytes::<u16, 1, 10>::parse(parser, bump)?;
        parser.read_u8()?;
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub75;

impl<'bump> Event<'bump> for Sub75 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 6, 3>::parse(parser, bump)?;
        parser.read_counted::<Sub74, u16>(bump, 3)?;
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub76;

impl<'bump> Event<'bump> for Sub76 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 26]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub77;

impl<'bump> Event<'bump> for Sub77 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        KindedBytes::<u16, 13, 10>::parse(parser, bump)?;
        KindedBytes::<u16, 13, 10>::parse(parser, bump)?;
        parser.read_u32()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub78;

impl<'bump> Event<'bump> for Sub78 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <Struct660>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub79;

impl<'bump> Event<'bump> for Sub79 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <Struct605>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub80;

impl<'bump> Event<'bump> for Sub80 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <[u8; 9]>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub81;

impl<'bump> Event<'bump> for Sub81 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        <Struct653>::parse(parser, bump)?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Sub82;

impl<'bump> Event<'bump> for Sub82 {
    fn parse(parser: &mut Parser, _: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        parser.read_u8()?;
        Ok(Self)
    }
}

#[derive(serde::Serialize)]
pub struct Struct560 {
    pub unk0: u8,
}

impl<'bump> Event<'bump> for Struct560 {
    fn parse(parser: &mut Parser, bump: &'bump bumpalo::Bump) -> anyhow::Result<Self> {
        let unk0 = parser.read_u8()?;
        (unk0 == 1)
            .then(|| <Sub73>::parse(parser, bump))
            .transpose()?;
        (unk0 == 2)
            .then(|| <Sub75>::parse(parser, bump))
            .transpose()?;
        (unk0 == 3)
            .then(|| <Sub76>::parse(parser, bump))
            .transpose()?;
        (unk0 == 4)
            .then(|| <Sub77>::parse(parser, bump))
            .transpose()?;
        (unk0 == 5)
            .then(|| <Sub78>::parse(parser, bump))
            .transpose()?;
        (unk0 == 6)
            .then(|| <Sub79>::parse(parser, bump))
            .transpose()?;
        (unk0 == 7)
            .then(|| <Sub80>::parse(parser, bump))
            .transpose()?;
        (unk0 == 8)
            .then(|| <Sub81>::parse(parser, bump))
            .transpose()?;
        (unk0 == 9)
            .then(|| <Sub82>::parse(parser, bump))
            .transpose()?;
        Ok(Self { unk0 })
    }
}
